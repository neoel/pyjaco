"""Defines all ist nodetypes available"""

from collections import namedtuple


def ist_node(name, fields):
    n_tuple = namedtuple(name, fields)

    class IST(n_tuple):
        stats = None

    IST.__name__ = name

    return IST


# Add           = ist_node('Add',           ())
# And           = ist_node('And',           ())
Assert        = ist_node('Assert',        ('test', 'msg'))
Assign        = ist_node('Assign',        ('targets', 'value'))
Attribute     = ist_node('Attribute',     ('value', 'attr', 'ctx'))
AugAssign     = ist_node('AugAssign',     ('target', 'op', 'value'))
AugLoad       = ist_node('AugLoad',       ())
AugStore      = ist_node('AugStore',      ())
BinOp         = ist_node('BinOp',         ('left', 'op', 'right'))
# BitAnd        = ist_node('BitAnd',        ())
# BitOr         = ist_node('BitOr',         ())
# BitXor        = ist_node('BitXor',        ())
BoolOp        = ist_node('BoolOp',        ('op', 'values'))
Break         = ist_node('Break',         ())
Call          = ist_node('Call',          ('func', 'args', 'keywords', 'starargs', 'kwargs'))
ClassDef      = ist_node('ClassDef',      ('name', 'bases', 'body', 'decorator_list'))
Compare       = ist_node('Compare',       ('left', 'ops', 'comparators'))
Continue      = ist_node('Continue',      ())
Del           = ist_node('Del',           ())
Delete        = ist_node('Delete',        ('targets',))
Dict          = ist_node('Dict',          ('keys', 'values'))
DictComp      = ist_node('DictComp',      ('key', 'value', 'generators'))
# Div           = ist_node('Div',           ())
Ellipsis      = ist_node('Ellipsis',      ())
# Eq            = ist_node('Eq',            ())
ExceptHandler = ist_node('ExceptHandler', ('type', 'name', 'body'))
Exec          = ist_node('Exec',          ('body', 'globals', 'locals'))
Expr          = ist_node('Expr',          ('value',))
# Expression    = ist_node('Expression',    ('body',))
ExtSlice      = ist_node('ExtSlice',      ('dims',))
# FloorDiv      = ist_node('FloorDiv',      ())
For           = ist_node('For',           ('target', 'iter', 'body', 'orelse'))
FunctionDef   = ist_node('FunctionDef',   ('name', 'args', 'body', 'decorator_list'))
GeneratorExp  = ist_node('GeneratorExp',  ('elt', 'generators'))
Global        = ist_node('Global',        ('names',))
# Gt            = ist_node('Gt',            ())
# GtE           = ist_node('GtE',           ())
If            = ist_node('If',            ('test', 'body', 'orelse'))
IfExp         = ist_node('IfExp',         ('test', 'body', 'orelse'))
Import        = ist_node('Import',        ('names',))
ImportFrom    = ist_node('ImportFrom',    ('module', 'names', 'level'))
# In            = ist_node('In',            ())
Index         = ist_node('Index',         ('value',))
# Interactive   = ist_node('Interactive',   ('body',))
# Invert        = ist_node('Invert',        ())
# Is            = ist_node('Is',            ())
# IsNot         = ist_node('IsNot',         ())
# LShift        = ist_node('LShift',        ())
Lambda        = ist_node('Lambda',        ('args', 'body'))
List          = ist_node('List',          ('elts', 'ctx'))
ListComp      = ist_node('ListComp',      ('elt', 'generators'))
Load          = ist_node('Load',          ())
# Lt            = ist_node('Lt',            ())
# LtE           = ist_node('LtE',           ())
# Mod           = ist_node('Mod',           ())
Module        = ist_node('Module',        ('body',))
# Mult          = ist_node('Mult',          ())
Name          = ist_node('Name',          ('id', 'ctx'))
# Not           = ist_node('Not',           ())
# NotEq         = ist_node('NotEq',         ())
# NotIn         = ist_node('NotIn',         ())
Num           = ist_node('Num',           ('n',))
Or            = ist_node('Or',            ())
Param         = ist_node('Param',         ())
Pass          = ist_node('Pass',          ())
# Pow           = ist_node('Pow',           ())
Print         = ist_node('Print',         ('dest', 'values', 'nl'))
RShift        = ist_node('RShift',        ())
Raise         = ist_node('Raise',         ('type', 'inst', 'tback'))
Repr          = ist_node('Repr',          ('value',))
Return        = ist_node('Return',        ('value',))
Set           = ist_node('Set',           ('elts',))
SetComp       = ist_node('SetComp',       ('elt', 'generators'))
Slice         = ist_node('Slice',         ('lower', 'upper', 'step'))
Store         = ist_node('Store',         ())
Str           = ist_node('Str',           ('s',))
# Sub           = ist_node('Sub',           ())
Subscript     = ist_node('Subscript',     ('value', 'slice', 'ctx'))
# Suite         = ist_node('Suite',         ('body',))
TryExcept     = ist_node('TryExcept',     ('body', 'handlers', 'orelse'))
TryFinally    = ist_node('TryFinally',    ('body', 'finalbody'))
Tuple         = ist_node('Tuple',         ('elts', 'ctx'))
# UAdd          = ist_node('UAdd',          ())
# USub          = ist_node('USub',          ())
UnaryOp       = ist_node('UnaryOp',       ('op', 'operand'))
While         = ist_node('While',         ('test', 'body', 'orelse'))
With          = ist_node('With',          ('context_expr', 'optional_vars', 'body'))
Yield         = ist_node('Yield',         ('value',))
alias         = ist_node('alias',         ('name', 'asname'))
arguments     = ist_node('arguments',     ('args', 'vararg', 'kwarg', 'defaults'))
# boolop        = ist_node('boolop',        ())
# cmpop         = ist_node('cmpop',         ())
comprehension = ist_node('comprehension', ('target', 'iter', 'ifs'))
# excepthandler = ist_node('excepthandler', ())
# expr          = ist_node('expr',          ())
# expr_context  = ist_node('expr_context',  ())
keyword       = ist_node('keyword',       ('arg', 'value'))
# mod           = ist_node('mod',           ())
operator      = ist_node('operator',      ('type'))
# slice         = ist_node('slice',         ())
# stmt          = ist_node('stmt',          ())
# unaryop       = ist_node('unaryop',       ())