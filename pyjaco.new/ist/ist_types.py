"""Defines all ist nodetypes available"""

from collections import namedtuple
from pprint import pprint

def ist_node(nodename, fields=(), defaults=()):
    n_tuple = namedtuple(nodename, fields)

    class IST(n_tuple):
        stats = None

        def __new__(cls, *args, **kwargs):
                
            arguments = {
                fields[i] : args[i] if len(args) > i else kwargs.get(fields[i], defaults[i])
                    for i in range(len(fields))
            }

            return super(cls, IST).__new__(cls, **arguments)

    IST.__name__ = nodename

    return IST


# Add           = ist_node('Add', )
# And           = ist_node('And', )
Assert          = ist_node('Assert', ('test', 'msg'), (None, None))
Assign          = ist_node('Assign', ('targets', 'value'), ([], None))
Attribute       = ist_node('Attribute', ('ctx', 'attr', 'value'), (None, None, None))
AugAssign       = ist_node('AugAssign', ('target', 'value', 'op'), (None, None, None))
AugLoad         = ist_node('AugLoad',)

AugStore        = ist_node('AugStore',)
BinOp           = ist_node('BinOp', ('op', 'right', 'left'), (None, None, None))
# BitAnd        = ist_node('BitAnd', )
# BitOr         = ist_node('BitOr', )
# BitXor        = ist_node('BitXor', )
BoolOp          = ist_node('BoolOp', ('values', 'op'), (None, None))
Break           = ist_node('Break',)
Call            = ist_node('Call', ('keywords', 'kwargs', 'args', 'func', 'starargs'), ([], None, [], None, None))
ClassDef        = ist_node('ClassDef', ('body', 'decorator_list', 'bases', 'name'), ([], None, [], None))
Compare         = ist_node('Compare', ('ops', 'comparators', 'left'), ([], [], None))
Continue        = ist_node('Continue',)
Del             = ist_node('Del',)
Delete          = ist_node('Delete', ('targets',), ([]))
Dict            = ist_node('Dict', ('keys', 'values'), ([], []))
DictComp        = ist_node('DictComp', ('generators', 'value', 'key'), ([], None, None))
# Div           = ist_node('Div', )
Ellipsis        = ist_node('Ellipsis',)
# Eq            = ist_node('Eq', )
ExceptHandler   = ist_node('ExceptHandler', ('body', 'type', 'name'), (None, None, None))
Exec            = ist_node('Exec', ('body', 'globals', 'locals'), (None, None, None))
Expr            = ist_node('Expr', ('value',), (None,))
# Expression    = ist_node('Expression', body=None)
ExtSlice        = ist_node('ExtSlice', ('dims',), ([]))
# FloorDiv      = ist_node('FloorDiv', )
For             = ist_node('For', ('body', 'orelse', 'target', 'iter'), ([], [], None, None))
FunctionDef     = ist_node('FunctionDef', ('decorator_list', 'name', 'args', 'body'), ([], None, None, []))
GeneratorExp    = ist_node('GeneratorExp', ('generators', 'elt'), (None, None))
Global          = ist_node('Global', ('names',), (None,))
# Gt            = ist_node('Gt', )
# GtE           = ist_node('GtE', )
If              = ist_node('If', ('test', 'body', 'orelse'), (None, None, None))
IfExp           = ist_node('IfExp', ('test', 'body', 'orelse'), (None, None, None))
Import          = ist_node('Import', ('names',), ([]))
ImportFrom      = ist_node('ImportFrom', ('names', 'module', 'level'), ([], None, None))
# In            = ist_node('In', )
Index           = ist_node('Index', ('value',), (None,))
# Interactive   = ist_node('Interactive', body=None)
# Invert        = ist_node('Invert', )
# Is            = ist_node('Is', )
# IsNot         = ist_node('IsNot', )
# LShift        = ist_node('LShift', )
Lambda          = ist_node('Lambda', ('body', 'args'), (None, None))
List            = ist_node('List', ('elts', 'ctx'), ([], None))
ListComp        = ist_node('ListComp', ('generators', 'elt'), ([], None))
Load            = ist_node('Load',)
# Lt            = ist_node('Lt', )
# LtE           = ist_node('LtE', )
# Mod           = ist_node('Mod', )
Module          = ist_node('Module', ('name', 'body'), (None, []))
# Mult          = ist_node('Mult', )
Name            = ist_node('Name', ('id', 'ctx'), (None, Load()))
# Not           = ist_node('Not', )
# NotEq         = ist_node('NotEq', )
# NotIn         = ist_node('NotIn', )
Num             = ist_node('Num', ('n',), (None,))
Or              = ist_node('Or',)
Param           = ist_node('Param',)
Pass            = ist_node('Pass',)
# Pow           = ist_node('Pow', )
Print           = ist_node('Print', ('dest', 'nl', 'values'), (None, True, []))
RShift          = ist_node('RShift',)
Raise           = ist_node('Raise', ('tback', 'inst', 'type'), (None, None, None))
Repr            = ist_node('Repr', ('value',), (None,))
Return          = ist_node('Return', ('value',), (None,))
Set             = ist_node('Set', ('elts',), ([]))
SetComp         = ist_node('SetComp', ('generators', 'elt'), ([], None))
Slice           = ist_node('Slice', ('upper', 'lower', 'step'), (None, None, None))
Store           = ist_node('Store',)
Str             = ist_node('Str', ('s',), (None,))
# Sub           = ist_node('Sub', )
Subscript       = ist_node('Subscript', ('slice', 'ctx', 'value'), (None, None, None))
# Suite         = ist_node('Suite', body=None)
TryExcept       = ist_node('TryExcept', ('body', 'orelse', 'handlers'), ([], [], []))
TryFinally      = ist_node('TryFinally', ('body', 'finalbody'), ([], []))
Tuple           = ist_node('Tuple', ('elts', 'ctx'), ([], None))
# UAdd          = ist_node('UAdd', )
# USub          = ist_node('USub', )
UnaryOp         = ist_node('UnaryOp', ('operand', 'op'), (None, None))
While           = ist_node('While', ('test', 'body', 'orelse'), (None, [], []))
With            = ist_node('With', ('body', 'optional_vars', 'context_expr'), ([], None, None))
Yield           = ist_node('Yield', ('value',), (None,))
alias           = ist_node('alias', ('name', 'asname'), (None, None))
arguments       = ist_node('arguments', ('args', 'defaults', 'vararg', 'kwarg'), ([], [], None, None))
# boolop        = ist_node('boolop', )
# cmpop         = ist_node('cmpop', )
comprehension   = ist_node('comprehension', ('target', 'iter', 'ifs'), (None, None, []))
# excepthandler = ist_node('excepthandler', )
# expr          = ist_node('expr', )
# expr_context  = ist_node('expr_context', )
keyword         = ist_node('keyword', ('value', 'arg'), (None, None))
# mod           = ist_node('mod', )
operator        = ist_node('operator', ('type',), (None,))
# slice         = ist_node('slice', )
# stmt          = ist_node('stmt', )
# unaryop       = ist_node('unaryop', )
